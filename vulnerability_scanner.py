# vulnerability_scanner.py
import nmap
import threading
import queue
import logging
import csv
import json
import requests
from cve_lookup import CVELookup

# Main vulnerability scanner class that coordinates network scanning and vulnerability lookup
class VulnerabilityScanner:
    def __init__(self, target_network, scan_type='TCP'):
        # Initialize nmap scanner and setup scanning configuration
        self.nm = nmap.PortScanner()
        self.target_network = target_network
        self.scan_type = scan_type
        # Thread-safe data structures for concurrent scanning
        self.results = []
        self.host_queue = queue.Queue()
        self.lock = threading.Lock()
        # Initialize CVE lookup capability
        self.cve_lookup = CVELookup()
        # Setup logging to track scanning progress and errors
        logging.basicConfig(filename='scanner.log', level=logging.INFO)

    def discover_hosts(self):
        # Perform initial network sweep to identify active hosts
        logging.info("Discovering hosts...")
        self.nm.scan(hosts=self.target_network, arguments='-sn')
        hosts_list = self.nm.all_hosts()
        for host in hosts_list:
            self.host_queue.put(host)
        logging.info(f"Hosts discovered: {hosts_list}")

    def scan_host(self):
        # Perform detailed port and service scanning on each discovered host
        while not self.host_queue.empty():
            host = self.host_queue.get()
            try:
                logging.info(f"Scanning host: {host}")
                # Configure scan options for service and OS detection
                arguments = '-sV -O'  # Version detection and OS fingerprinting
                if self.scan_type == 'UDP':
                    arguments += ' -sU'

                self.nm.scan(hosts=host, arguments=arguments)

                host_info = self.nm[host]
                host_result = {
                    'Host': host,
                    'OS': '',
                    'Ports': []
                }
                if 'osmatch' in host_info and host_info['osmatch']:
                    host_result['OS'] = host_info['osmatch'][0]['name']
                if 'tcp' in host_info:
                    for port in host_info['tcp']:
                        port_info = host_info['tcp'][port]
                        service = port_info.get('name', '')
                        product = port_info.get('product', '')
                        version = port_info.get('version', '')
                        state = port_info.get('state', '')
                        # Avoid unnecessary API calls if product or version is missing
                        if product and version:
                            cve_results = self.cve_lookup.search_cve(product, version)
                        else:
                            cve_results = []
                        port_result = {
                            'Port': port,
                            'State': state,
                            'Service': service,
                            'Product': product,
                            'Version': version,
                            'Vulnerabilities': cve_results
                        }
                        host_result['Ports'].append(port_result)
                with self.lock:
                    self.results.append(host_result)

            except nmap.PortScannerError as e:
                logging.error(f"Nmap error on host {host}: {e}")
            except requests.RequestException as e:
                logging.error(f"Request error during CVE lookup for host {host}: {e}")
            except Exception as e:
                logging.error(f"General error on host {host}: {e}")
            finally:
                self.host_queue.task_done()

    def start_scan(self):
        self.discover_hosts()

        threads = []
        for _ in range(2):  # Reduced number of threads to 2
            t = threading.Thread(target=self.scan_host)
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

    def get_results(self):
        # Format scan results for human-readable output
        results_str = ''
        for host_data in self.results:
            results_str += f"\nHost: {host_data['Host']}\n"
            results_str += f"OS: {host_data['OS']}\n"
            for port_data in host_data['Ports']:
                port_result = f"Port {port_data['Port']}/{port_data['State']}: {port_data['Service']} {port_data['Product']} {port_data['Version']}\n"
                if port_data['Vulnerabilities']:
                    port_result += f"  [!] Vulnerabilities:\n"
                    for cve in port_data['Vulnerabilities']:
                        port_result += f"    - {cve}\n"
                else:
                    port_result += "  [*] No known vulnerabilities.\n"
                results_str += port_result
        return results_str

    def export_results_csv(self, filename='scan_results.csv'):
        # Export scan results to CSV format for further analysis
        with open(filename, 'w', newline='') as csvfile:
            fieldnames = ['Host', 'OS', 'Port', 'State', 'Service', 'Product', 'Version', 'Vulnerability ID', 'Description']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for host_data in self.results:
                host = host_data['Host']
                os_info = host_data['OS']
                for port_data in host_data['Ports']:
                    port = port_data['Port']
                    state = port_data['State']
                    service = port_data['Service']
                    product = port_data['Product']
                    version = port_data['Version']
                    if port_data['Vulnerabilities']:
                        for vuln in port_data['Vulnerabilities']:
                            cve_id, description = vuln.split(': ', 1)
                            writer.writerow({
                                'Host': host,
                                'OS': os_info,
                                'Port': port,
                                'State': state,
                                'Service': service,
                                'Product': product,
                                'Version': version,
                                'Vulnerability ID': cve_id,
                                'Description': description
                            })
                    else:
                        writer.writerow({
                            'Host': host,
                            'OS': os_info,
                            'Port': port,
                            'State': state,
                            'Service': service,
                            'Product': product,
                            'Version': version,
                            'Vulnerability ID': 'N/A',
                            'Description': 'No known vulnerabilities.'
                        })

    def export_results_json(self, filename='scan_results.json'):
        # Export scan results to JSON format for programmatic use
        with open(filename, 'w') as jsonfile:
            json.dump(self.results, jsonfile, indent=4)
